name: Rust CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: stable

jobs:
  # Job สำหรับตรวจสอบคุณภาพโค้ด (Linting & Formatting)
  quality_checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain (${{ env.RUST_VERSION }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy, rustfmt

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUST_VERSION }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint with Clippy
        run: cargo clippy --all-targets --all-features # -D warnings ทำให้ warning กลายเป็น error

  # Job สำหรับ Build และ Test
  build_and_test:
    name: Build and Test
    # ทำให้ job นี้ต้องรอ quality_checks เสร็จก่อน
    needs: quality_checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain (${{ env.RUST_VERSION }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUST_VERSION }}

      - name: Build project (Debug)
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      # Build โปรเจกต์ (แบบ Release) เพื่อตรวจสอบว่า build ผ่านสำหรับ production
      - name: Build project (Release)
        run: cargo build --release --verbose

  # Job สำหรับตรวจสอบช่องโหว่ความปลอดภัย
  security_audit:
    name: Security Audit
    # ทำให้ job นี้ต้องรอ quality_checks เสร็จก่อน
    needs: quality_checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain (${{ env.RUST_VERSION }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUST_VERSION }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
